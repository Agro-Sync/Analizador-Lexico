name: deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  validacao-codigo:
    name: Validação de código
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Rodar Flake8
        run: |
          echo "🚀 Rodando Flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=100 --statistics
          

  configurar-credenciais:
    name: Configurar credenciais
    runs-on: ubuntu-latest
    needs: validacao-codigo
    outputs:
      AWS_ACCESS_KEY_ID: ${{ steps.aws_scraping.outputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.aws_scraping.outputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ steps.aws_scraping.outputs.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install depenencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install

      - name: Run AWS scraping script
        id: aws_scraping
        run: |
          python -u .github/workflows/get_aws_access.py
          
          echo "AWS_ACCESS_KEY_ID=$(grep AWS_ACCESS_KEY_ID creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$(grep AWS_SECRET_ACCESS_KEY creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "AWS_SESSION_TOKEN=$(grep AWS_SESSION_TOKEN creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
        env:
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: screenshots/

  validar-credenciais:
    name: Validar credenciais AWS
    runs-on: ubuntu-latest
    needs: configurar-credenciais

    steps:
      - name: Instalar AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Validar credenciais
        run: |
          echo "🔍 Validando credenciais AWS..."
          aws sts get-caller-identity
          aws s3 ls
          echo "✅ Credenciais válidas!"
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.configurar-credenciais.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.configurar-credenciais.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ needs.configurar-credenciais.outputs.AWS_SESSION_TOKEN }}

  upload-to-s3:
    runs-on: ubuntu-latest
    needs: validar-credenciais
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          AWS_ACCESS_KEY_ID: ${{ needs.configurar-credenciais.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.configurar-credenciais.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ needs.configurar-credenciais.outputs.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Instalar zip
        run: sudo apt-get install -y zip

      - name: Compactar código com versão
        id: zip
        run: |
          VERSION_TAG=$(date +'%Y%m%d-%H%M%S') # ou use git describe --tags
          ZIP_NAME="analizador-${VERSION_TAG}.zip"
          zip -r "$ZIP_NAME" src/
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Enviar versão para o S3
        run: |
          aws s3 cp ${{ steps.zip.outputs.zip_name }} s3://agrosync-bronze-jupyter/releases/${{ steps.zip.outputs.zip_name }}
          aws s3 cp ${{ steps.zip.outputs.zip_name }} s3://agrosync-bronze-jupyter/releases/latest.zip

# Depende de IAM Role para poder realizar o deploy diretamente na EC2
#  deploy-code-ec2:
#    name: Deploy do código no Jupyter EC2
#    runs-on: ubuntu-latest
#    needs: validar-credenciais
#
#    steps:
#      - name: Checkout do repositório
#        uses: actions/checkout@v3
#
#      - name: Enviar código para EC2 via SSM
#        env:
#          AWS_ACCESS_KEY_ID: ${{ needs.configurar-credenciais.outputs.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ needs.configurar-credenciais.outputs.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ needs.configurar-credenciais.outputs.AWS_SESSION_TOKEN }}
#          AWS_DEFAULT_REGION: us-east-1
#        run: |
#          echo "📡 Enviando código do repositório para EC2..."
#          aws ssm send-command \
#            --instance-ids "i-0db5167ddabeb2f30" \
#            --document-name "AWS-RunShellScript" \
#            --comment "Atualizando código Jupyter" \
#            --parameters 'commands=[
#              "cd /opt/jupyter/notebook",
#              "echo 🚀 Removendo pasta antiga se existir...",
#              "rm -rf crawler",
#              "echo 📦 Clonando repositório...",
#              "git clone https://github.com/Agro-Sync/Analizador-Lexico.git temp_repo",
#              "mv temp_repo/src crawler",
#              "rm -rf temp_repo",
#              "chown -R ec2-user:ec2-user /opt/jupyter/notebook/crawler",
#              "echo ✅ Código atualizado com sucesso!"
#            ]' \
#            --region us-east-1