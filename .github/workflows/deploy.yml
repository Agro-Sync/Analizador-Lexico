name: deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  validacao-codigo:
    name: Valida√ß√£o de c√≥digo
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Rodar Flake8
        run: |
          echo "üöÄ Rodando Flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=100 --statistics
          

  configurar-credenciais:
    name: Configurar credenciais
    runs-on: ubuntu-latest
    needs: validacao-codigo
    outputs:
      AWS_ACCESS_KEY_ID: ${{ steps.export.outputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.export.outputs.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ steps.export.outputs.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install depenencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install

      - name: Run AWS scraping script
        run: |
          python -u .github/workflows/get_aws_access.py
          
          echo "AWS_ACCESS_KEY_ID=$(grep AWS_ACCESS_KEY_ID creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "AWS_SECRET_ACCESS_KEY=$(grep AWS_SECRET_ACCESS_KEY creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "AWS_SESSION_TOKEN=$(grep AWS_SESSION_TOKEN creds.txt | cut -d= -f2)" >> $GITHUB_OUTPUT
        env:
          EMAIL: ${{ env.EMAIL }}
          PASSWORD: ${{ env.PASSWORD }}

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: screenshots/

      - name: Use AWS credentials
        run: |
          aws s3 ls  # exemplo de comando usando as creds
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

  validar-credenciais:
    name: Validar credenciais AWS
    runs-on: ubuntu-latest
    needs: configurar-credenciais

    steps:
      - name: Instalar AWS CLI
        run: sudo apt-get install -y awscli

      - name: Validar credenciais
        run: |
          echo "üîç Validando credenciais AWS..."
          aws sts get-caller-identity
          aws s3 ls
          echo "‚úÖ Credenciais v√°lidas!"
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.configurar-credenciais.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.configurar-credenciais.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ needs.configurar-credenciais.outputs.AWS_SESSION_TOKEN }}

  deploy-code-ec2:
    name: Deploy do c√≥digo no Jupyter EC2
    runs-on: ubuntu-latest
    needs: validar-credenciais

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v3

      - name: Instalar AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Enviar c√≥digo para EC2 via SSM
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          echo "üì° Enviando c√≥digo do reposit√≥rio para EC2..."
            aws ssm send-command \
              --instance-ids "i-0db5167ddabeb2f30" \
              --document-name "AWS-RunShellScript" \
              --comment "Atualizando c√≥digo Jupyter" \
              --parameters 'commands=[
                "cd /opt/jupyter/notebook",
                "echo üöÄ Removendo pasta antiga se existir...",
                "rm -rf crawler",
                "echo üì¶ Clonando reposit√≥rio...",
                "git clone https://github.com/Agro-Sync/Analizador-Lexico.git temp_repo",
                "mv temp_repo/src crawler",
                "rm -rf temp_repo",
                "chown -R ec2-user:ec2-user /opt/jupyter/notebook/crawler",
                "echo ‚úÖ C√≥digo atualizado com sucesso!"
              ]' \
              --region us-east-1